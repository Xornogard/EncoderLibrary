
EncoderLibrary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000017e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000665  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c1  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e9  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032c  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000068  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <enc_init>:

 uint8_t enc_value;

 void enc_init()
 {
	 ENC_PORT |= ENC_PIN_B;
  7c:	92 9a       	sbi	0x12, 2	; 18
	 ENC_PORT |= ENC_PIN_A;
  7e:	93 9a       	sbi	0x12, 3	; 18

	 GICR |= (1 << INT0); //Enable INT0
  80:	8b b7       	in	r24, 0x3b	; 59
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8b bf       	out	0x3b, r24	; 59
	 MCUCR |= (1 << ISC00);
  86:	85 b7       	in	r24, 0x35	; 53
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bf       	out	0x35, r24	; 53

	 sei();
  8c:	78 94       	sei
  8e:	08 95       	ret

00000090 <__vector_1>:
 }

ISR( INT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	static uint8_t dir;

	if(!(ENC_PIN & ENC_PIN_B))
  9e:	82 99       	sbic	0x10, 2	; 16
  a0:	05 c0       	rjmp	.+10     	; 0xac <__vector_1+0x1c>
	{
		dir = (ENC_PIN & ENC_PIN_A);
  a2:	80 b3       	in	r24, 0x10	; 16
  a4:	88 70       	andi	r24, 0x08	; 8
  a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  aa:	13 c0       	rjmp	.+38     	; 0xd2 <__vector_1+0x42>
	}
	else
	{
		if(dir != (ENC_PIN & ENC_PIN_A))
  ac:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  b0:	80 b3       	in	r24, 0x10	; 16
  b2:	88 70       	andi	r24, 0x08	; 8
  b4:	89 17       	cp	r24, r25
  b6:	69 f0       	breq	.+26     	; 0xd2 <__vector_1+0x42>
		{
			if(dir)
  b8:	99 23       	and	r25, r25
  ba:	31 f0       	breq	.+12     	; 0xc8 <__vector_1+0x38>
			{
				enc_value++;
  bc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enc_value>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
  c6:	05 c0       	rjmp	.+10     	; 0xd2 <__vector_1+0x42>
			}
			else
			{
				enc_value--;
  c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enc_value>
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enc_value>
			}
		}
	}
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <main>:
#define F_CPU 16e6
#include "encoderlib/encoder.h"

int main(void)
{
	DDRB = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bb       	out	0x17, r24	; 23

	uint8_t led_position = 0;

	enc_init();
  e4:	0e 94 3e 00 	call	0x7c	; 0x7c <enc_init>
    while (1) 
    {
		while (1)
		{
			led_position = enc_value%8;
			PORTB = ~(1 << led_position);
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enc_value>
  f0:	87 70       	andi	r24, 0x07	; 7
  f2:	a9 01       	movw	r20, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x1a>
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <main+0x16>
  fe:	ca 01       	movw	r24, r20
 100:	80 95       	com	r24
 102:	88 bb       	out	0x18, r24	; 24
 104:	f3 cf       	rjmp	.-26     	; 0xec <main+0xc>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
